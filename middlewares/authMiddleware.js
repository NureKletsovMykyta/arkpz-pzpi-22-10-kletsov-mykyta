const jwt = require("jsonwebtoken");
const db = require("../config/db");

// üìå Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ JWT
const authenticateUser = async (req, res, next) => {
    const token = req.header("Authorization");
    if (!token) {
        return res.status(401).json({ message: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞." });
    }

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        req.user = decoded;

        // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î
        const userResult = await db.query("SELECT role FROM system_users WHERE id = $1", [decoded.id]);
        if (userResult.rowCount === 0) {
            return res.status(403).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π" });
        }

        req.user.role = userResult.rows[0].role;
        next();
    } catch (error) {
        res.status(403).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω" });
        console.log("üîì –∑a—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω:", token);
    }
};

// üìå Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–ª—ñ
const authorizeRole = (...allowedRoles) => {
    return (req, res, next) => {
        if (!allowedRoles.includes(req.user.role)) {
            return res.status(403).json({ message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤" });
        }
        next();
    };
};

module.exports = { authenticateUser, authorizeRole };