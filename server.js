require("dotenv").config(); // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ —Ñ–∞–π–ª—É .env
const express = require("express"); // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Express
const cors = require("cors"); // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è CORS –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API
const db = require("./config/db"); // –Ü–º–ø–æ—Ä—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
const authRoutes = require("./routes/auth"); // –ú–∞—Ä—à—Ä—É—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
const userRoutes = require("./routes/users"); // –ú–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏

const mqtt = require('mqtt');
const client = mqtt.connect('mqtt://broker.hivemq.com'); // URL –≤–∞—à–æ–≥–æ MQTT-–±—Ä–æ–∫–µ—Ä–∞

const app = express(); // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Express

// üìå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Middleware
app.use(cors()); // –í–∫–ª—é—á–∞—î –ø—ñ–¥—Ç—Ä–∏–º–∫—É CORS
app.use(express.json()); // –î–æ–∑–≤–æ–ª—è—î –æ–±—Ä–æ–±–ª—è—Ç–∏ JSON-–∑–∞–ø–∏—Ç–∏
app.use(express.static('public')); // –û–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤

// üìå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤
app.use("/auth", authRoutes); // –ú–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
app.use("/users", userRoutes); // –ú–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏

// üìå –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ API
app.get("/", (req, res) => {
    res.send("üöÄ API –ø—Ä–∞—Ü—é—î! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /auth –∞–±–æ /users");
});

// üìå –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ç–∞–±–ª–∏—Ü—ñ sensors
app.get("/sensors", async (req, res) => {
    try {
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
        res.setHeader('Pragma', 'no-cache');
        res.setHeader('Expires', '0');

        const result = await db.query(`
         SELECT DISTINCT ON (type) id, type, count, status
FROM sensors
WHERE type IN ('Entrance', 'Into', 'Exit')
ORDER BY type, id DESC;
        `);
        console.log(result.rows); // –î–æ–¥–∞–Ω–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        res.json(result.rows);
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ç–∞–±–ª–∏—Ü—ñ sensors:", error);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ç–∞–±–ª–∏—Ü—ñ sensors" });
    }
});

// üìå –ì–ª–æ–±–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
});

// üìå –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT; // || 5000;
app.listen(PORT, async () => {
    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–∞
        await db.query("SELECT NOW()");
        console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—ñ ${PORT}`);
        console.log("üìå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ —É—Å–ø—ñ—à–Ω–µ!");
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏:", error);
    }
});

client.on('connect', function () {
    console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MQTT-–±—Ä–æ–∫–µ—Ä–∞');
    client.subscribe('iot/count', function (err) {
        if (!err) {
            console.log('–ü—ñ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ —Ç–æ–ø—ñ–∫: iot/count');
        }
    });
});

client.on('message', async function (topic, message) {
    // message —î Buffer
    console.log(`–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–æ–ø—ñ–∫–∞ ${topic}: ${message.toString()}`);
    // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É –±–∞–∑—É –¥–∞–Ω–∏—Ö, –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç–æ—â–æ.
    try {
        const data = JSON.parse(message.toString());
        console.log(data);
        const { Entrance, Into, Exit } = data;

        const status = 'active';
        const type1 = 'Entrance';
        const type2 = 'Into';
        const type3 = 'Exit';

        // SQL-–∑–∞–ø–∏—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–∏—Ö —É —Ç–∞–±–ª–∏—Ü—é sensors
        const insertQuery = 'INSERT INTO sensors (count, type, status) VALUES ($1, $2, $3) RETURNING *';

        // –í—Å—Ç–∞–≤–∫–∞ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞
        let result = await db.query(insertQuery, [Entrance, type1, status]);
        console.log("–ù–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ —É —Ç–∞–±–ª–∏—Ü—é sensors:", result.rows[0]);

        // –í—Å—Ç–∞–≤–∫–∞ –¥—Ä—É–≥–æ–≥–æ —Ä—è–¥–∫–∞
        result = await db.query(insertQuery, [Into, type2, status]);
        console.log("–ù–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ —É —Ç–∞–±–ª–∏—Ü—é sensors:", result.rows[0]);

        // –í—Å—Ç–∞–≤–∫–∞ —Ç—Ä–µ—Ç—å–æ–≥–æ —Ä—è–¥–∫–∞
        result = await db.query(insertQuery, [Exit, type3, status]);
        console.log("–ù–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ —É —Ç–∞–±–ª–∏—Ü—é sensors:", result.rows[0]);

    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", error);
    }
});